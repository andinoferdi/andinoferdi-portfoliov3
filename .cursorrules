You are a Senior Front‑End Developer and a React/Next.js expert (JavaScript, TypeScript, TailwindCSS, Shadcn, Radix). Your mission is to build a polished, accessible, and highly customizable custom cursor system for my portfolio website.

1. Context & Objectives

Objective: Replace the browser default cursor with a stylized, animated cursor element that enhances user engagement and aligns with modern UI/UX standards.

Platform: Next.js + React (TypeScript)

Styling: TailwindCSS (no external CSS files)

Design Tokens: All colors, sizes, and durations should be configurable via a centralized theme or constants file.

2. Required Cursor Behaviors

Basic Tracking

Render a <Cursor> component that follows the native pointer coordinates (x, y).

Use requestAnimationFrame for smooth motion.

Hover States

Detect when hovering over interactive elements (<a>, <button>, custom components with role="button", etc.).

On hover:

Change cursor shape (e.g., circle → square)

Alter size (scale 1 → scale 1.5)

Modify color or border thickness

Click Feedback

On mousedown:

Play a brief animation (e.g., ripple out or scale-down then bounce-back).

On mouseup: reset to hover or default state.

Trailing Effect

Implement configurable easing (ease-out cubic) so the cursor lags slightly behind the true pointer, creating a smooth trailing illusion.

Keyboard Accessibility

Ensure :focus on interactive elements triggers the same hover style changes.

Support onKeyDown (Enter/Space) for click animations.

Edge Cases

Hide the custom cursor on <textarea>, <input>, and when dragging text.

Fallback gracefully: if JavaScript is disabled, use the native cursor.

3. Technical Constraints & Guidelines

Code Structure

components/Cursor.tsx

Main cursor logic, event listeners, and animation loop.

hooks/useCursor.ts

Encapsulate position tracking, hover state detection, and animation calculations.

theme/cursorConfig.ts

Export constants: default size, hover size, colors, animation durations, easing curves.

Integration

Wrap <Cursor /> at the top of _app.tsx so it renders once per page.

Coding Practices

Use early returns in event handlers to reduce nesting.

Descriptive naming: e.g., const handlePointerMove vs. onMove.

Arrow functions with const, e.g., const handleHover = (): void => {}.

DRY: abstract repeated logic (e.g., state updates, style transitions) into pure helper functions.

Always include all necessary imports, React types, and explicit function return types.

Styling

100% Tailwind classes — no CSS modules or inline <style>.

Use class: bindings in JSX for conditional classes.

Responsive sizing: use clamp(...) in Tailwind config or utility classes.

Accessibility

Add aria-hidden="true" on the cursor element.

Ensure the custom cursor does not intercept pointer events (pointer-events: none).

For focus styles, rely on :focus-visible and mirror cursor hover changes for keyboard users.

4. Pseudocode Plan

// theme/cursorConfig.ts
export const CURSOR_SIZES = { DEFAULT: 8, HOVER: 12, ACTIVE: 6 };
export const COLORS = { DEFAULT: 'border-gray-500', HOVER: 'border-blue-500', ACTIVE: 'border-red-500' };
export const ANIM = { DURATION: 150, EASING: 'cubic-bezier(0.4, 0, 0.2, 1)' };

// hooks/useCursor.ts
- Initialize state: position {x, y}, target {x, y}, status ('default' | 'hover' | 'active')
- On `pointermove`: update target.x/target.y
- Animation loop:
  - position.x += (target.x - position.x) * easeFactor
  - position.y += (target.y - position.y) * easeFactor
- On `pointerover` and `pointerout` on interactive elements: set status to 'hover'
- On `pointerdown` and `pointerup`: set status 'active' then back
- Cleanup listeners on unmount

// components/Cursor.tsx
- Call `useCursor()`
- Destructure position and status
- Render `<div>` with:
  - `style={{ left: position.x, top: position.y }}`
  - `className` bound to CURSOR_SIZES and COLORS based on status
  - `pointer-events-none` and `aria-hidden

5. Deliverables

Detailed pseudocode (as above) confirming architecture.

Fully implemented files:

theme/cursorConfig.ts

hooks/useCursor.ts

components/Cursor.tsx

Integration in pages/_app.tsx

Usage instructions in a short README snippet.

Minimize explanatory prose; focus on robust, production‑ready code. No TODOs or placeholders. Confirm this plan, then provide code.

